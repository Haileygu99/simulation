# installing packages 
import pydbgen
from pydbgen import pydbgen
import faker 
import pandas as pd
import numpy as np 
from faker import Faker
import secrets 
import string
import random
import time
from datetime import datetime
from datetime import date
import matplotlib.pyplot as plt
import scipy.stats as stats
from scipy.stats import skewnorm

#Setting seed
random.seed(1)
Faker.seed(1)
fake = Faker()

#Random gender generation
df=pd.DataFrame({
    "Gender":random.choices(['male','female'],k=500),
})

#Height and BMI functions

def height_func(df):
    if df['Gender']=='male':
        height=np.random.normal(loc=180, scale=6.35)
    else:
        height=np.random.normal(loc=160, scale=5.59)
    bmi=stats.skewnorm.rvs(a=3, loc=27.3264, scale=4.77152)
    return height, bmi

df[['height','bmi']]=df.apply(height_func,axis=1,result_type='expand')
print(df)
plt.hist(df['bmi'])


#Age dataset
age=pd.DataFrame({"Age":np.random.normal(40.3,5.242,size=500)
                 })
print(age)
#histogram 
plt.hist(age.Age, range = (30,60))



#10 gene expressions 
gene_expression = pd.DataFrame({"geneExpression":np.random.normal(10.3,2.45,size=500)})

print(gene_expression)
# gene expression graph, positively skewed.
plt.hist(gene_expression.geneExpression, range = (5,20))



# 5 SNPs dataframe (empty tho)
SNPs = pd.DataFrame(index=np.arange(1,501),columns=['SNP1','SNP2','SNP3','SNP4','SNP5'])
print(SNPs)

# SNPs again, 2 should appear the most, then 1, then 0.
fake_SNPs = [
    {'SNP1':random.choices(['0','1','2'],weights=[0.18,0.23,0.48]),
     'SNP2':random.choices(['0','1','2'],weights=[0.18,0.23,0.48]),
     'SNP3':random.choices(['0','1','2'],weights=[0.18,0.23,0.48]),
     'SNP4':random.choices(['0','1','2'],weights=[0.18,0.23,0.48]),
     'SNP5':random.choices(['0','1','2'],weights=[0.18,0.23,0.48])
                                 }
for x in range(500)]
SNP = pd.DataFrame(fake_SNPs)
print(SNP)



# generating fake infomation including id, gender,names,age,city,country,education
fake_profile = [
    {'id': ''.join(secrets.choice(string.digits)
                 for i in range(9)),
     'gender': np.random.choice(["M", "F"], p=[0.5, 0.5]),
     'name': fake.name(),
     'city':fake.city(),
     'country':np.random.choice(["NZ","CA","AU","GB","US"]),
     'education': random.choices(['primary','high school','bachelor','master','phd'],weights=[0.14,0.5,0.3,0.05,0.01]),
                                 }
for x in range(500)]

#1% phd, 5% masters, 30% bachelor, 50% high school, 14% primary

# data frame containing the above information

df_profile = pd.DataFrame(fake_profile)
print(df_profile)
print(df)

# Generating age right-skewed 
numValues = 500
maxValue = 60
minValue = 30
skewness = 2   #Negative values are left skewed, positive values are right skewed.

random = skewnorm.rvs(a = skewness,loc=maxValue, size=numValues)  #Skewnorm function

random = random - min(random)      #Shift the set so the minimum value is equal to zero.
random = random / max(random)      #Standadize all the vlues between 0 and 1. 
random = random * maxValue         #Multiply the standardized values by the maximum value.

#Plot histogram to check skewness
plt.hist(random,30,density=True, color = 'red', alpha=0.1,range = (30,60))
plt.show()
